name: Helm Chart Release

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  helm-release:
    name: Package and Release Helm Chart
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Extract version from release
        id: version
        run: |
          # Get version from release tag name
          VERSION="${{ github.event.release.tag_name }}"
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "CHART_VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "APP_VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "RELEASE_TAG=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          echo "IS_PRERELEASE=${{ github.event.release.prerelease }}" >> $GITHUB_OUTPUT
          
          echo "Release version: $VERSION"
          echo "Release tag: ${{ github.event.release.tag_name }}"
          echo "Is prerelease: ${{ github.event.release.prerelease }}"

      - name: Process CHANGELOG for chart
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          RELEASE_TAG="${{ steps.version.outputs.RELEASE_TAG }}"
          
          # Extract release notes from the published release
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "${{ github.event.release.body }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Also extract CHANGELOG section for this version if it exists
          if [[ -f "CHANGELOG.md" ]] && grep "\#\# \[${VERSION}\]" CHANGELOG.md; then
            echo "CHANGELOG_SECTION<<EOF" >> $GITHUB_OUTPUT
            sed -n "/## \[${VERSION}\]/,/## \[/p" CHANGELOG.md | head -n -1 >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG_SECTION=" >> $GITHUB_OUTPUT
          fi

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Chart.yaml
        run: |
          # Update chart version and app version
          sed -i "s/version: .*/version: ${{ steps.version.outputs.CHART_VERSION }}/" charts/alert-reaction-operator/Chart.yaml
          sed -i "s/appVersion: .*/appVersion: \"${{ steps.version.outputs.APP_VERSION }}\"/" charts/alert-reaction-operator/Chart.yaml
          
          # Update home and sources URLs to use correct repository
          sed -i "s|home: .*|home: https://github.com/${{ github.repository }}|" charts/alert-reaction-operator/Chart.yaml
          sed -i "s|sources:.*|sources:|" charts/alert-reaction-operator/Chart.yaml
          sed -i "/sources:/a\\  - https://github.com/${{ github.repository }}" charts/alert-reaction-operator/Chart.yaml

      - name: Update values.yaml with correct image
        run: |
          # Update the default image in values.yaml
          sed -i "s|repository: .*|repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}|" charts/alert-reaction-operator/values.yaml
          sed -i "s|tag: .*|tag: \"${{ steps.version.outputs.APP_VERSION }}\"|" charts/alert-reaction-operator/values.yaml

      - name: Bundle CRDs with chart
        run: |
          # Create crds directory in chart
          mkdir -p charts/alert-reaction-operator/crds/
          
          # Copy CRDs from config/crd to chart crds directory
          cp config/crd/*.yaml charts/alert-reaction-operator/crds/
          
          echo "✅ CRDs bundled with chart:"
          ls -la charts/alert-reaction-operator/crds/

      - name: Lint Helm chart
        run: |
          helm lint charts/alert-reaction-operator/

      - name: Validate Helm chart
        run: |
          # Test template rendering
          helm template test-release charts/alert-reaction-operator/ > /tmp/rendered-templates.yaml
          
          # Check if templates are valid YAML
          cat /tmp/rendered-templates.yaml | yq eval '.' > /dev/null
          
          echo "✅ Chart templates are valid"

      - name: Package Helm chart
        run: |
          mkdir -p .helm-charts
          helm package charts/alert-reaction-operator/ --destination .helm-charts/
          
          # Create chart index
          helm repo index .helm-charts/ --url https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.RELEASE_TAG }}/

      - name: Push Helm chart to OCI registry
        run: |
          # Push to GitHub Container Registry as OCI artifact
          helm push .helm-charts/alert-reaction-operator-${{ steps.version.outputs.CHART_VERSION }}.tgz oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts

      - name: Generate release notes
        id: release_notes
        run: |
          # Create release notes with Helm installation instructions
          cat > release_notes.md << EOF
          ## Helm Chart Release v${{ steps.version.outputs.CHART_VERSION }}
          
          ### Release Notes
          
          ${{ steps.changelog.outputs.RELEASE_NOTES }}
          
          EOF
          
          # Add CHANGELOG section if available
          if [[ -n "${{ steps.changelog.outputs.CHANGELOG_SECTION }}" ]]; then
            echo "" >> release_notes.md
            echo "### Detailed Changes" >> release_notes.md
            echo "" >> release_notes.md
            echo "${{ steps.changelog.outputs.CHANGELOG_SECTION }}" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          cat >> release_notes.md << EOF
          ### Installation
          
          #### Install from OCI Registry (Recommended)
          \`\`\`bash
          # Install directly from GitHub Container Registry
          helm install alert-reaction-operator oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts/alert-reaction-operator --version ${{ steps.version.outputs.CHART_VERSION }}
          
          # Or with custom values
          helm install alert-reaction-operator oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts/alert-reaction-operator --version ${{ steps.version.outputs.CHART_VERSION }} -f values.yaml
          \`\`\`
          
          #### Install from Release Assets
          \`\`\`bash
          # Download and install from release assets
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.RELEASE_TAG }}/alert-reaction-operator-${{ steps.version.outputs.CHART_VERSION }}.tgz -o alert-reaction-operator-${{ steps.version.outputs.CHART_VERSION }}.tgz
          helm install alert-reaction-operator ./alert-reaction-operator-${{ steps.version.outputs.CHART_VERSION }}.tgz
          \`\`\`
          
          ### Upgrade
          \`\`\`bash
          # Upgrade from OCI registry
          helm upgrade alert-reaction-operator oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts/alert-reaction-operator --version ${{ steps.version.outputs.CHART_VERSION }}
          \`\`\`
          
          ### Container Images
          - **Operator Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.APP_VERSION }}\`
          
          ### Chart Details
          - **Chart Version**: ${{ steps.version.outputs.CHART_VERSION }}
          - **App Version**: ${{ steps.version.outputs.APP_VERSION }}
          - **Kubernetes Compatibility**: 1.19+
          
          EOF

      - name: Update GitHub Release with Helm chart info
        run: |
          # Update the existing release with Helm chart information
          RELEASE_TAG="${{ steps.version.outputs.RELEASE_TAG }}"
          
          # Get current release body
          CURRENT_BODY=$(gh release view "$RELEASE_TAG" --json body --jq '.body')
          
          # Append Helm chart information
          echo "$CURRENT_BODY" > current_body.md
          echo "" >> current_body.md
          echo "---" >> current_body.md
          echo "" >> current_body.md
          cat release_notes.md >> current_body.md
          
          # Update the release
          gh release edit "$RELEASE_TAG" \
            --notes-file current_body.md
          
          # Upload Helm chart files to the existing release
          gh release upload "$RELEASE_TAG" \
            .helm-charts/*.tgz \
            .helm-charts/index.yaml \
            --clobber
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Helm repository index
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        run: |
          # Clone repository for gh-pages branch
          git clone https://github.com/${{ github.repository }}.git gh-pages-repo
          cd gh-pages-repo
          
          # Configure git identity in the cloned repository
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          
          # Switch to gh-pages branch (create if it doesn't exist)
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            git checkout gh-pages
          else
            git checkout --orphan gh-pages
            # Remove all files for orphan branch
            git rm -rf . 2>/dev/null || true
          fi
          
          # Clean up any existing content (keep .git)
          find . -maxdepth 1 ! -name '.git' ! -name '.' -exec rm -rf {} + 2>/dev/null || true
          
          # Copy chart and index
          cp ../.helm-charts/*.tgz .
          cp ../.helm-charts/index.yaml .
          
          # Create simple index.html for the Helm repository
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Alert Reaction Operator Helm Repository</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 40px; }
              .code { background: #f4f4f4; padding: 10px; border-radius: 4px; }
            </style>
          </head>
          <body>
            <h1>Alert Reaction Operator Helm Repository</h1>
            <p>This is the official Helm repository for the Alert Reaction Operator.</p>
            
            <h2>Add Repository</h2>
            <div class="code">
              <code>helm repo add alert-reaction-operator https://${{ github.repository_owner }}.github.io/k8s-alert-reaction-operator/</code><br>
              <code>helm repo update</code>
            </div>
            
            <h2>Install Chart</h2>
            <div class="code">
              <code>helm install my-operator alert-reaction-operator/alert-reaction-operator</code>
            </div>
            
            <h2>Available Charts</h2>
            <ul>
              <li><a href="index.yaml">index.yaml</a> - Helm repository index</li>
          EOF
          
          # Add links to chart packages
          for chart in *.tgz; do
            echo "    <li><a href=\"$chart\">$chart</a></li>" >> index.html
          done
          
          cat >> index.html << 'EOF'
            </ul>
            
            <p>For more information, visit the <a href="https://github.com/${{ github.repository }}">project repository</a>.</p>
          </body>
          </html>
          EOF
          
          # Commit and push
          git add .
          if git commit -m "Update Helm repository for release ${{ steps.version.outputs.RELEASE_TAG }}"; then
            # Push to gh-pages branch (create if it doesn't exist)
            git push origin gh-pages || git push -u origin gh-pages
            echo "✅ Helm repository updated successfully"
          else
            echo "ℹ️ No changes to commit to Helm repository"
          fi

      - name: Summary
        run: |
          echo "## 🎉 Helm Chart Release Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Chart Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Chart Version**: ${{ steps.version.outputs.CHART_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **App Version**: ${{ steps.version.outputs.APP_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **OCI Registry**: \`oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts/alert-reaction-operator\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Installation Commands" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# From OCI Registry" >> $GITHUB_STEP_SUMMARY
          echo "helm install alert-reaction-operator oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts/alert-reaction-operator --version ${{ steps.version.outputs.CHART_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# From Helm Repository" >> $GITHUB_STEP_SUMMARY
          echo "helm repo add alert-reaction-operator https://${{ github.repository_owner }}.github.io/k8s-alert-reaction-operator/" >> $GITHUB_STEP_SUMMARY
          echo "helm install alert-reaction-operator alert-reaction-operator/alert-reaction-operator --version ${{ steps.version.outputs.CHART_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY