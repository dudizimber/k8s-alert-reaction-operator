#!/bin/bash

# Pre-push Git hook for the k8s-alert-reaction-operator
# This hook runs comprehensive checks before allowing pushes to remote repositories

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🚀 Running pre-push checks...${NC}"

# Get information about the push
protected_branch="main"
current_branch=$(git rev-parse --abbrev-ref HEAD)

echo -e "${BLUE}📍 Current branch: $current_branch${NC}"

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to run a command and handle errors
run_check() {
    local cmd="$1"
    local description="$2"
    
    echo -e "${GREEN}🔄 $description...${NC}"
    
    if eval "$cmd"; then
        echo -e "${GREEN}✅ $description passed${NC}"
        return 0
    else
        echo -e "${RED}❌ $description failed${NC}"
        return 1
    fi
}

# Check for required tools
echo -e "${GREEN}🔧 Checking for required tools...${NC}"

required_tools=("go" "gofmt")
for tool in "${required_tools[@]}"; do
    if ! command_exists "$tool"; then
        echo -e "${RED}❌ Required tool '$tool' is not installed${NC}"
        exit 1
    fi
done

# Check for optional tools
if command_exists "golangci-lint"; then
    HAS_GOLANGCI_LINT=true
    echo -e "${GREEN}✅ golangci-lint found${NC}"
else
    HAS_GOLANGCI_LINT=false
    echo -e "${YELLOW}⚠️  golangci-lint not found, skipping advanced linting${NC}"
fi

echo

# 1. Comprehensive formatting check
echo -e "${GREEN}🎨 Checking Go formatting across entire codebase...${NC}"
unformatted_files=$(find . -name "*.go" -not -path "./vendor/*" -not -path "./.git/*" -exec gofmt -l {} \;)
if [ -n "$unformatted_files" ]; then
    echo -e "${RED}❌ The following files are not properly formatted:${NC}"
    echo "$unformatted_files"
    echo -e "${YELLOW}💡 Run 'gofmt -w .' or 'make fmt' to fix formatting${NC}"
    exit 1
else
    echo -e "${GREEN}✅ All Go files are properly formatted${NC}"
fi

# 2. Run go vet
if ! run_check "go vet ./..." "Go vet analysis"; then
    echo -e "${YELLOW}💡 Run 'make vet' to see detailed issues${NC}"
    exit 1
fi

# 3. Run comprehensive linting with golangci-lint
if [ "$HAS_GOLANGCI_LINT" = true ]; then
    if ! run_check "golangci-lint run --timeout=10m" "Comprehensive linting with golangci-lint"; then
        echo -e "${YELLOW}💡 Run 'golangci-lint run' to see detailed issues${NC}"
        exit 1
    fi
else
    echo -e "${YELLOW}⚠️  Skipping golangci-lint (not installed)${NC}"
    echo -e "${YELLOW}💡 Install golangci-lint for better code quality: https://golangci-lint.run/usage/install/${NC}"
fi

# 4. Verify go.mod and go.sum are clean
echo -e "${GREEN}📦 Verifying Go modules are clean...${NC}"
cp go.mod go.mod.backup
cp go.sum go.sum.backup

go mod tidy

if ! cmp -s go.mod go.mod.backup || ! cmp -s go.sum go.sum.backup; then
    echo -e "${RED}❌ go.mod or go.sum are not up to date${NC}"
    echo -e "${YELLOW}💡 Run 'go mod tidy' and commit the changes${NC}"
    mv go.mod.backup go.mod
    mv go.sum.backup go.sum
    exit 1
else
    echo -e "${GREEN}✅ Go modules are clean${NC}"
    rm go.mod.backup go.sum.backup
fi

# 5. Build check
if ! run_check "go build ./..." "Go build"; then
    echo -e "${YELLOW}💡 Fix build errors before pushing${NC}"
    exit 1
fi

# 6. Run full test suite
echo -e "${GREEN}🧪 Running full test suite...${NC}"
if ! run_check "go test ./... -race -timeout=10m" "Full test suite with race detection"; then
    echo -e "${RED}❌ Tests failed! Cannot push with failing tests.${NC}"
    echo -e "${YELLOW}💡 Run 'make test' to see detailed test failures${NC}"
    exit 1
fi

# 7. Generate and verify manifests (for Kubernetes operators)
if [ -f "Makefile" ] && grep -q "manifests" Makefile; then
    echo -e "${GREEN}📋 Generating and verifying Kubernetes manifests...${NC}"
    
    # Create backup of current manifests
    if [ -d "config/crd" ]; then
        cp -r config/crd config/crd.backup
    fi
    if [ -d "config/rbac" ]; then
        cp -r config/rbac config/rbac.backup
    fi
    
    # Generate new manifests
    if ! run_check "make manifests" "Generating Kubernetes manifests"; then
        echo -e "${RED}❌ Failed to generate manifests${NC}"
        # Restore backups
        if [ -d "config/crd.backup" ]; then
            rm -rf config/crd
            mv config/crd.backup config/crd
        fi
        if [ -d "config/rbac.backup" ]; then
            rm -rf config/rbac
            mv config/rbac.backup config/rbac
        fi
        exit 1
    fi
    
    # Check if manifests changed
    if [ -d "config/crd.backup" ] && ! diff -r config/crd config/crd.backup >/dev/null; then
        echo -e "${RED}❌ CRD manifests are out of date${NC}"
        echo -e "${YELLOW}💡 Run 'make manifests' and commit the changes${NC}"
        rm -rf config/crd
        mv config/crd.backup config/crd
        if [ -d "config/rbac.backup" ]; then
            rm -rf config/rbac.backup
        fi
        exit 1
    fi
    
    if [ -d "config/rbac.backup" ] && ! diff -r config/rbac config/rbac.backup >/dev/null; then
        echo -e "${RED}❌ RBAC manifests are out of date${NC}"
        echo -e "${YELLOW}💡 Run 'make manifests' and commit the changes${NC}"
        rm -rf config/rbac
        mv config/rbac.backup config/rbac
        if [ -d "config/crd.backup" ]; then
            rm -rf config/crd.backup
        fi
        exit 1
    fi
    
    # Clean up backups
    if [ -d "config/crd.backup" ]; then
        rm -rf config/crd.backup
    fi
    if [ -d "config/rbac.backup" ]; then
        rm -rf config/rbac.backup
    fi
    
    echo -e "${GREEN}✅ Kubernetes manifests are up to date${NC}"
fi

# 8. Check for sensitive information (basic check)
echo -e "${GREEN}🔒 Checking for potential sensitive information...${NC}"
sensitive_patterns=("password" "secret" "token" "key.*=" "api.*key")
found_sensitive=false

for pattern in "${sensitive_patterns[@]}"; do
    if git diff --cached --name-only | xargs grep -i "$pattern" 2>/dev/null | grep -v "test" | grep -v ".md" | grep -v ".sample"; then
        found_sensitive=true
    fi
done

if [ "$found_sensitive" = true ]; then
    echo -e "${YELLOW}⚠️  Potential sensitive information detected in staged files${NC}"
    echo -e "${YELLOW}💡 Please review the above matches and ensure no secrets are being committed${NC}"
    echo -e "${YELLOW}Press ENTER to continue or Ctrl+C to abort...${NC}"
    read -r
fi

# 9. Additional checks for main/master branch
if [ "$current_branch" = "$protected_branch" ] || [ "$current_branch" = "master" ]; then
    echo -e "${YELLOW}⚠️  Pushing to protected branch: $current_branch${NC}"
    echo -e "${YELLOW}💡 Ensure this push has been reviewed and approved${NC}"
    
    # Check if we're ahead of origin
    if git rev-list --count @{u}.. >/dev/null 2>&1; then
        commits_ahead=$(git rev-list --count @{u}..)
        echo -e "${BLUE}📊 You are $commits_ahead commit(s) ahead of origin/$current_branch${NC}"
    fi
fi

echo
echo -e "${GREEN}🎉 All pre-push checks passed! 🚀${NC}"
echo -e "${BLUE}📤 Proceeding with push to remote repository...${NC}"